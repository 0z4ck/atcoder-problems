#include <bits/stdc++.h>
#define DBGln(x) do { std::cerr << #x << ": " << x << std::endl; } while (0)
#define DBG(x) do { std::cerr << #x << ": " << x ; } while (0)
using namespace std;
const int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};

template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<T>& v){
    s.put('[');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& e : v) {
        s << comma << e;
        comma[0] = ',';
    }
    return s << ']';
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::pair<T,T2>& p){
    s.put('{');
    s<<p.first<<": "<<p.second;
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<std::vector<T>>& v){
    for(const auto& e : v){
        s.put('[');
        char comma[3] = {'\0', ' ', '\0'};
        for (const auto& e2 : e) {
            s << comma << e2;
            comma[0] = ',';
        }
        s << ']'<<endl;
    }
    return s;
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::map<T,T2>& mp){
    s.put('{');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& p : mp) {
        s << comma << p.first << ": "<<p.second;
        comma[0] = ',';
    }
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::queue<T> q){
    s<<"queue(";
    char comma[3] = {'\0', ' ', '\0'};
    while (!q.empty()){
        s << comma <<q.front();
        q.pop();
        comma[0] = ',';
    }
    return s << ')';
}

void solve(long long N, long long L, long long W, std::vector<long long> a){
    /*int i=0,cnt=0;
    for(int x=0;x<L;){
        for(;a[i]<=x;i++)
          if(a[i]<=x&&a[i]+W>=x)
            x=a[i]+W;
        else{
            cnt++;
            x+=W;
        }
    }*/
    long long x,point=0,cnt=0;
    for(int i=0;i<N;i++){
        if (a[i]>point) {
            if ((a[i]-point)%W!=0){
                cnt += ((a[i]-point)/W) +1;
                point = a[i]+W;
            }else{
                cnt += (a[i]-point)/W;
                point = a[i]+W;
            }
        }else
            point = a[i] + W;
    }
        if (point<x) {
            if (((x)-point)%W!=0)
                cnt += ((x)-point)/W+1;
            else
                cnt += ((x)-point)/W;
        }
    cout<<cnt<<endl;
}
// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    long long L;
    std::scanf("%lld", &L);
    long long W;
    std::scanf("%lld", &W);
    std::vector<long long> a(N);
    for(int i = 0 ; i < N ; i++){
        std::scanf("%lld", &a[i]);
    }
    solve(N, L, W, std::move(a));
    return 0;
}
