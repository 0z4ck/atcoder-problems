#include <bits/stdc++.h>
using namespace std;

void print_2queue(queue<vector<int>> q, queue<vector<int>> q2)
{
  cout<<"q1 = queue ( ";
  while (!q.empty())
  {
    vector<int> v = q.front();
    std::cout << "{"<<v[0]<<","<<v[1] << "},";
    q.pop();
  }
  cout<<" ) , q2 = queue ( ";
  while (!q2.empty())
  {
    auto v = q2.front();
    std::cout << "{"<<v[0]<<","<<v[1] << "},";
    q2.pop();
  }

  std::cout <<")"<< std::endl;
}

void solve(long long H, long long W, std::vector<std::string> s){
    vector<vector<int>> flag(H,vector<int>(W,0));
    queue<vector<int>> q[2];
    q[0].push(vector<int> {0,0});
    int c = 0;
    int dx[]={0,1}, dy[]={1,0};

    while(!q[0].empty()||!q[1].empty()){
        int w = q[c&1].front()[0];
        int h = q[c&1].front()[1];
        q[c&1].pop();
        if(w==W-1&&h==H-1)
            break;
        for(int i=0;i<2;i++)
            if(w+dx[i]<W&&h+dy[i]<H&&!flag[h+dy[i]][w+dx[i]]++)
                q[(c^s[h][w]^s[h+dy[i]][w+dx[i]])&1].push(vector<int> {w+dx[i],h+dy[i]});
        if (q[c&1].empty()&&!q[(c^1)&1].empty())
            c++;
    
    }
    c+= (s[0][0]&1)+(s[H-1][W-1]&1);
    cout << c/2 <<endl;
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long H;
    std::scanf("%lld", &H);
    long long W;
    std::scanf("%lld", &W);
    std::vector<std::string> s(W);
    for(int i = 0 ; i < W ; i++){
        std::cin >> s[i];
    }
    solve(H, W, std::move(s));
    return 0;
}
