#include <bits/stdc++.h>
#define DBGln(x) do { std::cerr << #x << ": " << x << std::endl; } while (0)
#define DBG(x) do { std::cerr << #x << ": " << x << " "; } while (0)
#define rep(i, n) for (ll i=0; i<n; ++i)
#define all(obj) (obj).begin(),(obj).end()
#define rall(obj) (obj).rbegin(),(obj).rend()
typedef long long ll;
using namespace std;
const int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};

template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<T>& v){
    s.put('[');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& e : v) {
        s << comma << e;
        comma[0] = ',';
    }
    return s << ']';
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::pair<T,T2>& p){
    s.put('{');
    s<<p.first<<": "<<p.second;
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<std::vector<T>>& v){
    for(const auto& e : v){
        s.put('[');
        char comma[3] = {'\0', ' ', '\0'};
        for (const auto& e2 : e) {
            s << comma << e2;
            comma[0] = ',';
        }
        s << ']'<<endl;
    }
    return s;
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::map<T,T2>& mp){
    s.put('{');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& p : mp) {
        s << comma << p.first << ": "<<p.second;
        comma[0] = ',';
    }
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::queue<T> q){
    s<<"queue(";
    char comma[3] = {'\0', ' ', '\0'};
    while (!q.empty()){
        s << comma <<q.front();
        q.pop();
        comma[0] = ',';
    }
    return s << ')';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::stack<T> stk){
    s<<"stack(";
    char comma[3] = {'\0', ' ', '\0'};
    while (!stk.empty()){
        s << comma <<stk.top();
        stk.pop();
        comma[0] = ',';
    }
    return s << ')';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::set<T> stt){
    s<<"set(";
    char comma[3] = {'\0', ' ', '\0'};
    for(auto &a:stt){
        s << comma <<a;
        comma[0] = ',';
    }
    return s << ')';
}
const long long MOD = 998244353;

void solve(long long N, long long M, long long K, long long S, long long T, long long X, std::vector<long long> U, std::vector<long long> V){
    vector<vector<int>> G(N);
    vector<vector<vector<int>>> dp(K+1,vector<vector<int>>(N,vector<int>(2,0)));

    rep(i,M){
        G[U[i]-1].push_back(V[i]-1);
        G[V[i]-1].push_back(U[i]-1);
    }

    for(auto &a : G[S-1])
        if(a==X-1)
            dp[1][a][1]=1;
        else
            dp[1][a][0]=1;
    
    rep(i,K-1)
        rep(j,N)
            for(auto &a: G[j])
                if(a==X-1){
                    dp[i+2][j][0] = (dp[i+2][j][0]+dp[i+1][a][1])%MOD;
                    dp[i+2][j][1] = (dp[i+2][j][1]+dp[i+1][a][0])%MOD;
                }else{
                    dp[i+2][j][0] = (dp[i+2][j][0]+dp[i+1][a][0])%MOD;
                    dp[i+2][j][1] = (dp[i+2][j][1]+dp[i+1][a][1])%MOD;
                }
    cout<< dp[K][T-1][0] <<endl;

}
// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    long long M;
    std::scanf("%lld", &M);
    long long K;
    std::scanf("%lld", &K);
    long long S;
    std::scanf("%lld", &S);
    long long T;
    std::scanf("%lld", &T);
    long long X;
    std::scanf("%lld", &X);
    std::vector<long long> U(M);
    std::vector<long long> V(M);
    for(int i = 0 ; i < M ; i++){
        std::scanf("%lld", &U[i]);
        std::scanf("%lld", &V[i]);
    }
    solve(N, M, K, S, T, X, std::move(U), std::move(V));
    return 0;


}



