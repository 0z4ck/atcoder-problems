#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

const string YES = "Yes";
const string NO = "No";

void solve(long long N, long long M, std::vector<long long> A, std::vector<long long> B, std::vector<long long> C, std::vector<long long> D){
    vector<long long> perm(N);
    for (long long i=0;i<N;i++)
        perm[i]=i;


    vector<vector<bool>> m1(N,vector<bool>(N,false));
    vector<vector<bool>> m2(N,vector<bool>(N,false));
    for (long long i=0;i<M;i++){
        A[i]--;B[i]--;C[i]--;D[i]--;
        m1[A[i]][B[i]]=true;
        m1[B[i]][A[i]]=true;
        m2[C[i]][D[i]]=true;
        m2[D[i]][C[i]]=true;
    }
    do {
        bool eq = true;
        for (long long i=0;i<N;i++){
            for (long long j=0;j<N;j++)
                if(m1[i][j]!=m2[perm[i]][perm[j]]){
                eq = false;
                break;
            }
        }
        if (eq){
            cout<<YES<<endl;
            return;
        }
    }while(next_permutation(perm.begin(),perm.end()));

    cout << NO <<endl;

}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    long long M;
    std::scanf("%lld", &M);
    std::vector<long long> A(M);
    std::vector<long long> B(M);
    for(int i = 0 ; i < M ; i++){
        std::scanf("%lld", &A[i]);
        std::scanf("%lld", &B[i]);
    }
    std::vector<long long> C(M);
    std::vector<long long> D(M);
    for(int i = 0 ; i < M ; i++){
        std::scanf("%lld", &C[i]);
        std::scanf("%lld", &D[i]);
    }
    solve(N, M, std::move(A), std::move(B), std::move(C), std::move(D));
    return 0;
}
