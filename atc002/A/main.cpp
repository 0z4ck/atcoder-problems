#include <bits/stdc++.h>
#define DBGln(x) do { std::cerr << #x << ": " << x << std::endl; } while (0)
#define DBG(x) do { std::cerr << #x << ": " << x << " "; } while (0)
#define rep(i, n) for (ll i=0; i<n; ++i)
#define all(obj) (obj).begin(),(obj).end()
#define rall(obj) (obj).rbegin(),(obj).rend()
typedef long long ll;
using namespace std;
const int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};

template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<T>& v){
    s.put('[');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& e : v) {
        s << comma << e;
        comma[0] = ',';
    }
    return s << ']';
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::pair<T,T2>& p){
    s.put('{');
    s<<p.first<<": "<<p.second;
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, const std::vector<std::vector<T>>& v){
    for(const auto& e : v){
        s.put('[');
        char comma[3] = {'\0', ' ', '\0'};
        for (const auto& e2 : e) {
            s << comma << e2;
            comma[0] = ',';
        }
        s << ']'<<endl;
    }
    return s;
}
template<typename T,typename T2>
std::ostream& operator<<(std::ostream& s, const std::map<T,T2>& mp){
    s.put('{');
    char comma[3] = {'\0', ' ', '\0'};
    for (const auto& p : mp) {
        s << comma << p.first << ": "<<p.second;
        comma[0] = ',';
    }
    return s << '}';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::queue<T> q){
    s<<"queue(";
    char comma[3] = {'\0', ' ', '\0'};
    while (!q.empty()){
        s << comma <<q.front();
        q.pop();
        comma[0] = ',';
    }
    return s << ')';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::stack<T> stk){
    s<<"stack(";
    char comma[3] = {'\0', ' ', '\0'};
    while (!stk.empty()){
        s << comma <<stk.top();
        stk.pop();
        comma[0] = ',';
    }
    return s << ')';
}
template<typename T>
std::ostream& operator<<(std::ostream& s, std::set<T> stt){
    s<<"set(";
    char comma[3] = {'\0', ' ', '\0'};
    for(auto &a:stt){
        s << comma <<a;
        comma[0] = ',';
    }
    return s << ')';
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    // Failed to predict input format
    int R,C,sy,sx,gy,gx;
    cin >>R>>C>>sy>>sx>>gy>>gx;
    sy--;sx--;gy--;gx--;
    vector<vector<char>> grid(R, vector<char>(C));
    for(int i=0; i<R; ++i)
        for(int j=0; j<C; ++j)
            cin>>grid[i][j];
    vector<vector<int>> seen(R, vector<int> (C, 0));
    queue<vector<int>> q;

    vector<int> po{sy,sx,0};
    q.push(po);

    int w,h;
    int dist = 0;

    while(!q.empty()){
        h = q.front()[0];
        w = q.front()[1];
        dist = q.front()[2];
        q.pop();
		if(seen[h][w])
            continue;
        if (gy==h&&gx==w){
            cout<<dist<<endl;
            return 0;
        }
        seen[h][w]=1;
        if (h!=0 && grid[h-1][w]!='#'){
            q.push(vector<int> {h-1, w, dist+1});
        }
        if (h!=R-1 && grid[h+1][w]!='#'){
            q.push(vector<int> {h+1, w, dist+1});
        }
        if (w!=0 && grid[h][w-1]!='#'){
            q.push(vector<int> {h, w-1, dist+1});
        }
        if (w!=C-1 && grid[h][w+1]!='#'){
            q.push(vector<int> {h, w+1,dist+1});
        }
    }
    cout<<"No connexity"<<endl;

    return 0;


}



